import flash.display.DisplayObject;
import flash.display.MovieClip;
import flash.events.Event;
import flash.events.MouseEvent;
import flash.events.TimerEvent;
import flash.text.TextField;
import flash.text.TextFieldAutoSize;
import flash.text.TextFormat;
import flash.utils.getTimer;
import flash.utils.Timer;
import scaleform.clik.constants.InvalidationType;
import scaleform.clik.core.UIComponent;
import scaleform.clik.events.InputEvent;
import scaleform.clik.constants.ControllerType;
import scaleform.clik.ui.InputDetails;
import scaleform.clik.constants.InputValue;
import scaleform.clik.constants.NavigationCode;
import scaleform.clik.events.ButtonEvent;
import scaleform.clik.utils.Constraints;
import scaleform.clik.events.ComponentEvent;
import scaleform.clik.utils.ConstrainedElement;
import scaleform.gfx.FocusEventEx;
import scaleform.gfx.MouseEventEx;
import scaleform.clik.constants.ConstrainMode;
/**
    Buttons are the foundation component of the CLIK framework and are used anywhere a clickable interface control is required. The default Button class (gfx.controls.Button) supports a textField to display a label, and states to visually indicate user interaction. Buttons can be used on their own, or as part of a composite component, such as ScrollBar arrows or the Slider thumb. Most interactive components that are click-activated compose or extend Button.
    
    The CLIK Button is a general purpose button component, which supports mouse interaction, keyboard interaction, states and other functionality that allow it to be used in a multitude of user interfaces. It also supports toggle capability as well as animated states. The ToggleButton, AnimatedButton and AnimatedToggleButton provided in the Button.fla component source file all use the same base component class.
    
    <b>Inspectable Properties</b>
    The inspectable properties of the Button component are:
    <ul>
        <li><i>autoRepeat</i>: Determines if the button dispatches "click" events when pressed down and held. </li>
        <li><i>autoSize</i>: Determines if the button will scale to fit the text that it contains and which direction to align the resized button. Setting the autoSize property to {@code autoSize="none"} will leave its current size unchanged.</li>
        <li><i>data</i>: Data related to the button. This property is particularly helpful when using butons in a ButtonGroup. </li>
        <li><i>enabled</i>: Disables the button if set to false.</li>
        <li><i>focusable</i>: By default buttons receive focus for user interactions. Setting this property to false will disable focus acquisition.</li>
        <li><i>label</i>: Sets the label of the Button.</li>
        <li><i>selected</i>: Set the selected state of the Button. Buttons can have two sets of mouse states, a selected and unselected.  When a Button's {@code toggle} property is {@code true} the selected state will be changed when the button is clicked, however the selected state can be set using ActionScript even if the toggle property is false.</li>
        <li><i>toggle</i>: Sets the toggle property of the Button. If set to true, the Button will act as a toggle button.</li>
        <li><i>visible</i>: Hides the button if set to false.</li>
    </ul>
    
    <b>States</b>
    The CLIK Button component supports different states based on user interaction. These states include
    <ul>
        <li>an up or default state.</li>
        <li>an over state when the mouse cursor is over the component, or when it is focused.</li>
        <li>a down state when the button is pressed.</li>
        <li>a disabled state.</li>
    </ul>
    
    These states are represented as keyframes in the Flash timeline, and are the minimal set of keyframes required for the Button component to operate correctly. There are other states that extend the capabilities of the component to support complex user interactions and animated transitions, and this information is provided in the Getting Started with CLIK Buttons document.    
    
    <b>Events</b>
    All event callbacks receive a single Event parameter that contains relevant information about the event. The following properties are common to all events. <ul>
    <li><i>type</i>: The event type.</li>
    <li><i>target</i>: The target that generated the event.</li></ul>
        
    The events generated by the Button component are listed below. The properties listed next to the event are provided in addition to the common properties.
    <ul>
        <li><i>ComponentEvent.SHOW</i>: The visible property has been set to true at runtime.</li>
        <li><i>ComponentEvent.HIDE</i>: The visible property has been set to false at runtime.</li>
        <li><i>FocusHandlerEvent.FOCUS_IN</i>: The button has received focus.</li>
        <li><i>FocusHandlerEvent.FOCUS_OUT</i>: The button has lost focus.</li>
        <li><i>Event.SELECT</i>: The selected property has changed.</li>
        <li><i>ComponentEvent.STATE_CHANGE</i>: The button's state has changed.</li>
        <li><i>ButtonEvent.PRESS</i>: The button has been pressed.</li>
        <li><i>ButtonEvent.CLICK</i>: The button has been clicked.</li>
        <li><i>ButtonEvent.DRAG_OVER</i>: The mouse cursor has been dragged over the button (while the left mouse button is pressed).</li>
        <li><i>ButtonEvent.DRAG_OUT</i>: The mouse cursor has been dragged out of the button (while the left mouse button is pressed).</li>
        <li><i>ButtonEvent.RELEASE_OUTSIDE</i>: The mouse cursor has been dragged out of the button and the left mouse button has been released.</li>
    </ul>
*/
intrinsic class scaleform.clik.controls.Button extends UIComponent
{
	/** Locks drag over and drag out state changes. Useful for scrollbar and slider thumbs. */
	public var lockDragStateChange : Boolean;
	/** The delay (milliseconds) before the initial repeat event is fired. */
	public var repeatDelay : Number;
	/** The delay (milliseconds) between subsequent repeat events. */
	public var repeatInterval : Number;
	/** True if constraints are disabled for the component. Setting the disableConstraintsproperty to {@code disableConstraints=true} will remove constraints from the textfield. This is useful for components with timeline based textfield size tweens, since constraints break them due to a Flash quirk. */
	public var constraintsDisabled : Boolean;
	/** True if the Button can be deselected when already selected and clicked again. False for RadioButtons by default.*/
	public var allowDeselect : Boolean;
	/** True if the Button should not autosize itself when the state changes. False otherwise-- by default. Note that the autoSize property will not work if preventAutosizing is set to true. */
	public var preventAutosizing : Boolean;
	public var _toggle : Boolean;
	public var _label : String;
	public var _state : String;
	public var _group : ButtonGroup;
	public var _groupName : String;
	public var _selected : Boolean;
	public var _data : Object;
	public var _autoRepeat : Boolean;
	public var _autoSize : String;
	public var _pressedByKeyboard : Boolean;
	public var _isRepeating : Boolean;
	/** Reference to the UIComponent that generated this Button, if applicatable (eg. ButtonGroup). */
	public var _owner : UIComponent;
	/** A list of frames that apply to a given state. The frames will be called in order, and the last existing frame will be displayed. */
	public var _stateMap : Object;
	public var _newFrame : String;
	public var _newFocusIndicatorFrame : String;
	public var _repeatTimer : Timer;
	public var _mouseDown : int;
	public var _focusIndicatorLabelHash : Object;
	public var _autoRepeatEvent : ButtonEvent;
	/** A reference to the textField in the component.  The textField is an optional element. Note that when state changes are made, the textField instance may change, so changes made to it externally may be lost. */
	public var textField : TextField;
	public var defaultTextFormat : TextFormat;
	/** A reference to a MovieClip that is used to denote focus. It can either have one frame (which will cause the Button to show/hide this focus movie by toggling its visibility), or have two named frames: show and hide, which will be played appropriately.*/
	public var _focusIndicator : MovieClip;
	public var statesDefault : Vector.;
	public var statesSelected : Vector.;

	public function get data() : Object;
	public function set data(value:Object) : void;

	public function get autoRepeat() : Boolean;
	public function set autoRepeat(value:Boolean) : void;

	public function get enabled() : Boolean;
	public function set enabled(value:Boolean) : void;

	public function get focusable() : Boolean;
	public function set focusable(value:Boolean) : void;

	public function get toggle() : Boolean;
	public function set toggle(value:Boolean) : void;

	/** Reference to the owner of this Button (generally, a subclass of CoreList). */
	public function get owner() : UIComponent;
	public function set owner(value:UIComponent) : void;

	/** Retrieve the current state of the Button. */
	public function get state() : String;

	public function get selected() : Boolean;
	public function set selected(value:Boolean) : void;

	/**
         * A reference to the {@link ButtonGroup} instance that the button belongs to. The group is usually created
         * in the parent clip of the button, so buttons in the same MovieClip scope with the same name can behave as
         * a group. ButtonGroups will only be created in the parent scope when automatically created.
         * @see ButtonGroup
         */
	public function get group() : ButtonGroup;
	public function set group(value:ButtonGroup) : void;

	/**
         * The name of the {@link #group} that the button belongs to. If the group does not exist, it is created in the parent of the button so that other buttons with the same group name can belong to the same group.
         * @see #group
         * @see ButtonGroup
         */
	public function get groupName() : String;
	public function set groupName(value:String) : void;

	public function get label() : String;
	public function set label(value:String) : void;

	public function get autoSize() : String;
	public function set autoSize(value:String) : void;

	/** @exclude */
	public function get focusIndicator() : MovieClip;
	public function set focusIndicator(value:MovieClip) : void;


	public function Button();

	public function preInitialize() : void;

	public function initialize() : void;

	/** @exclude */
	public function handleInput(event:InputEvent) : void;

	/** @exclude */
	public function toString() : String;

	public function configUI() : void;

	public function draw() : void;

	public function addToAutoGroup(event:Event) : void;

	public function checkOwnerFocused() : Boolean;

	public function calculateWidth() : Number;

	public function alignForAutoSize() : void;

	public function updateText() : void;

	public function changeFocus() : void;

	public function handleMouseRollOver(event:MouseEvent) : void;

	public function handleMouseRollOut(event:MouseEvent) : void;

	public function handleMousePress(event:MouseEvent) : void;

	public function handleMouseRelease(event:MouseEvent) : void;

	public function handleReleaseOutside(event:MouseEvent) : void;

	public function handlePress(controllerIndex:uint = 0) : void;

	public function handleRelease(controllerIndex:uint = 0) : void;

	public function handleClick(controllerIndex:uint = 0) : void;

	public function beginRepeat(event:TimerEvent) : void;

	public function handleRepeat(event:TimerEvent) : void;

	public function setState(state:String) : void;

	public function getStatePrefixes() : Vector.;

	public function updateAfterStateChange() : void;

}