import flash.display.MovieClip;
import flash.display.Sprite;
import flash.events.Event;
import flash.text.TextFieldAutoSize;
import flash.utils.getDefinitionByName;
import scaleform.clik.controls.Button;
import scaleform.clik.controls.ButtonGroup;
import scaleform.clik.constants.InvalidationType;
import scaleform.clik.core.UIComponent;
import scaleform.clik.data.DataProvider;
import scaleform.clik.events.IndexEvent;
import scaleform.clik.events.ButtonEvent;
import scaleform.clik.events.InputEvent;
import scaleform.clik.events.ButtonBarEvent;
import scaleform.clik.interfaces.IDataProvider;
import scaleform.clik.constants.InputValue;
import scaleform.clik.ui.InputDetails;
import scaleform.clik.constants.NavigationCode;
/**
 * The ButtonBar is similar to the ButtonGroup although it has a visual representation. It is also able to create Button instances on the fly based on a DataProvider. The ButtonBar is useful for creating dynamic tab-bar like UI elements.
 
    <b>Inspectable Properties</b>
    The inspectable properties of the Button component are:
    <ul>
        <li><i>autoSize</i>: Determines if the ButtonBar's Buttons will scale to fit the text that it contains and which direction to align the resized Button. Setting the autoSize property to {@code autoSize="none"} will leave the child Buttons' size unchanged.</li>
        <li><i>buttonWidth</i>: Sets a common width to all Button instances. If autoSize is set to true this property is ignored.</li>
        <li><i>direction</i>: Button placement. Horizontal will place the Button instances side-by-side, while vertical will stack them on top of each other.</li>
        <li><i>enabled</i>: Disables the button if set to true.</li>
        <li><i>focusable</i>: By default the ButtonBar can receive focus for user interactions. Setting this property to false will disable focus acquisition.</li>
        <li><i>itemRenderer</i>: Linkage ID of the Button component symbol. This symbol will be instantiated as needed based on the data assigned to the ButtonBar.</li>
        <li><i>spacing</i>: The spacing between the Button instances. Affects only the current direction (see direction property).</li>
        <li><i>visible</i>: Hides the component if set to false.</li>
    </ul>
    
    <b>States</b>
    The CLIK ButtonBar does not have any visual states because its managed Button components are used to display the group state.
    
    <b>Events</b>
    All event callbacks receive a single Event parameter that contains relevant information about the event. The following properties are common to all events. <ul>
    <li><i>type</i>: The event type.</li>
    <li><i>target</i>: The target that generated the event.</li></ul>
        
    The events generated by the Button component are listed below. The properties listed next to the event are provided in addition to the common properties.
    <ul>
        <li><i>ComponentEvent.SHOW</i>: The visible property has been set to true at runtime.</li>
        <li><i>ComponentEvent.HIDE</i>: The visible property has been set to false at runtime.</li>
        <li><i>FocusHandlerEvent.FOCUS_IN</i>: The component has received focus.</li>
        <li><i>FocusHandlerEvent.FOCUS_OUT</i>: The component has lost focus.</li>
        <li><i>ButtonBar.BUTTON_SELECT</i>: The selected property has changed.</li>
        <li><i>IndexEvent.INDEX_CHANGE,</i>: The button has been pressed.</li>
    </ul>
*/
intrinsic class scaleform.clik.controls.ButtonBar extends UIComponent
{
	public var _autoSize : String;
	public var _buttonWidth : Number;
	public var _dataProvider : IDataProvider;
	public var _direction : String;
	public var _group : ButtonGroup;
	public var _itemRenderer : String;
	public var _itemRendererClass : Class;
	public var _labelField : String;
	public var _labelFunction : Function;
	public var _renderers : Array;
	public var _spacing : Number;
	public var _selectedIndex : Number;
	public var container : MovieClip;
	static public var DIRECTION_HORIZONTAL : String;
	static public var DIRECTION_VERTICAL : String;

	public function get enabled() : Boolean;
	public function set enabled(value:Boolean) : void;

	public function get focusable() : Boolean;
	public function set focusable(value:Boolean) : void;

	/**
         * The data model displayed in the component. The dataProvider must implement the 
         * {@code IDataProvider} interface. When a new DataProvider is set, the {@code selectedIndex}
         * property will be reset to 0.
         * @see DataProvider
         * @see IDataProvider
         */
	public function get dataProvider() : IDataProvider;
	public function set dataProvider(value:IDataProvider) : void;

	public function set itemRendererName(value:String) : void;

	public function get spacing() : Number;
	public function set spacing(value:Number) : void;

	public function get direction() : String;
	public function set direction(value:String) : void;

	public function get autoSize() : String;
	public function set autoSize(value:String) : void;

	public function get buttonWidth() : Number;
	public function set buttonWidth(value:Number) : void;

	/**
         * The index of the item that is selected in a single-selection list.
         */
	public function get selectedIndex() : int;
	public function set selectedIndex(value:int) : void;

	/**
         * The item at the {@code selectedIndex} in the DataProvider.
         */
	public function get selectedItem() : Object;

	/**
         * The {@code data} property of the {@code selectedItem}.
         * @see Button#data
         */
	public function get data() : Object;

	/**
         * The name of the field in the {@code dataProvider} model to be displayed as the label for itemRenderers.  A {@code labelFunction} will be used over a {@code labelField} if it is defined.
         */
	public function get labelField() : String;
	public function set labelField(value:String) : void;

	/**
         * The function used to determine the label for itemRenderers. A {@code labelFunction} will override a {@code labelField} if it is defined.
         */
	public function get labelFunction() : Function;
	public function set labelFunction(value:Function) : void;


	public function ButtonBar();

	public function initialize() : void;

	/** Mark the settings of this component invalid and schedule a draw() on next Stage.INVALIDATE event. */
	public function invalidateSettings() : void;

	/**
         * Convert an item to a label string using the {@code labelField} and {@code labelFunction}. If the item is not an object, then it will be converted to a string, and returned.
         * @param item The item to convert to a label.
         * @returns The converted label string.
         * @see #labelField
         * @see #labelFunction
         */
	public function itemToLabel(item:Object) : String;

	/** Retrieve a reference to one of the ButtonBar's Buttons. */
	public function getButtonAt(index:int) : Button;

	/** @exclude */
	public function handleInput(event:InputEvent) : void;

	/** @exclude */
	public function toString() : String;

	public function configUI() : void;

	public function draw() : void;

	public function refreshData() : void;

	public function updateRenderers() : void;

	public function populateData(data:Array) : void;

	public function populateRendererData(renderer:Button, index:uint) : void;

	public function setupRenderer(renderer:Button, index:uint);

	public function handleButtonGroupChange(event:Event) : void;

	public function handleDataChange(event:Event) : void;

	public function changeFocus() : void;

}