import flash.display.DisplayObjectContainer;
import flash.display.Sprite;
import flash.events.Event;
import flash.events.EventDispatcher;
import flash.events.MouseEvent;
import flash.utils.Dictionary;
import scaleform.clik.controls.Button;
import scaleform.clik.events.ButtonEvent;
/**
    The CLIK ButtonGroup component is used to manage sets of buttons. It allows one button in the set to be selected, and ensures that the rest are unselected. If the user selects another button in the set, then the currently selected button will be unselected. Any component that derives from the CLIK Button component such as CheckBox and RadioButton) can be assigned a ButtonGroup instance.
    
    <b>Inspectable Properties</b>
    The ButtonGroup does not have a visual representation on the Stage. Therefore no inspectable properties are available.
    
    <b>States</b>
    The ButtonGroup does not have a visual representation on the Stage. Therefore no states are associated with it.
    
    <b>Events</b>
    All event callbacks receive a single Event parameter that contains relevant information about the event. The following properties are common to all events. <ul>
    <li><i>type</i>: The event type.</li>
    <li><i>target</i>: The target that generated the event.</li></ul>
        
    The events generated by the Button component are listed below. The properties listed next to the event are provided in addition to the common properties.
    <ul>
        <li><i>ComponentEvent.SHOW</i>: The visible property has been set to true at runtime.</li>
        <li><i>ComponentEvent.HIDE</i>: The visible property has been set to false at runtime.</li>
        <li><i>Event.CHANGE</i>: The selected button of the ButtonGroup has changed.</li>
        <li><i>ButtonEvent.BUTTON_CLICK</i>: A button in the group has been clicked.</li>
    </ul>
 */
intrinsic class scaleform.clik.controls.ButtonGroup extends EventDispatcher
{
	static public var groups : Dictionary;
	/**
         * The name of the ButtonGroup, specified by the {@code groupName} property on the subscribing Buttons.
         * @see Button#groupName
         */
	public var name : String;
	/** The MovieClip container in which this ButtonGroup belongs. */
	public var weakScope : Dictionary;
	/** The current Button that is selected. Only a single Button can be selected at one time. */
	public var selectedButton : Button;
	public var _children : Array;

	/**
         * The number of buttons in the group.
         */
	public function get length() : uint;

	/**
         * The data for the selected Button.
         */
	public function get data() : Object;

	/**
         * The index of the Button in the ButtonGroup's children array.
         */
	public function get selectedIndex() : int;

	public function get scope() : DisplayObjectContainer;


	static public function getGroup(name:String, scope:DisplayObjectContainer) : ButtonGroup;

	public function ButtonGroup(name:String, scope:DisplayObjectContainer);

	/**
         * Add a Button to group.  A Button can only be added once to a ButtonGroup, and can only exist in
         * a single group at a time. Buttons will change the selection of a ButtonGroup by dispatching "select"
         * and "click" events.
         * @param button The Button instance to add to this group
         */
	public function addButton(button:Button) : void;

	/**
         * Remove a button from the group. If it the last button in the group, the button should clean up
         * and destroy the ButtonGroup.
         * @param button The Button instance to be removed from group.
         */
	public function removeButton(button:Button) : void;

	/**
         * Find a button at a specified index in the ButtonGroup. Buttons are indexed in the order that they are added.
         * @param index Index in the ButtonGroup of the Button.
         * @returns The button at the specified index. null if there is no button at that index.
         */
	public function getButtonAt(index:int) : Button;

	public function setSelectedButtonByIndex(index:uint, selected:Boolean = true) : Boolean;

	/**
         * Sets the specified button to the {@code selectedButton}. The selected property of the previous selected
         * Button will be set to {@code false}. If {@code null} is passed to this method, the current selected Button
         * will be deselected, and the {@code selectedButton} property set to {@code null}.
         * @param button The button instance to select.
         * @see #selectedButton
         */
	public function updateSelectedButton(button:Button, selected:Boolean = true) : void;

	/** Returns true if the Button provided is part of the ButtonGroup. */
	public function hasButton(button:Button) : Boolean;

	/** @exclude */
	public function toString() : String;

	/**
         * The "selected" state of one of the buttons in the group has changed. If the button is selected,
         * it will become the new {@code selectedButton}. If it is not, the selectedButton in the group will be
         * set to {@code null}.
         */
	public function handleSelect(event:Event) : void;

	/**
         * A button in the group has been clicked. The button will be set to the {@code selectedButton}.
         */
	public function handleClick(event:ButtonEvent) : void;

	public function handleRemoved(event:Event) : void;

}