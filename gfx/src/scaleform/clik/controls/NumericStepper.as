import flash.display.DisplayObject;
import flash.display.MovieClip;
import flash.events.Event;
import flash.events.MouseEvent;
import flash.text.TextField;
import scaleform.clik.constants.ConstrainMode;
import scaleform.clik.constants.InvalidationType;
import scaleform.clik.core.UIComponent;
import scaleform.clik.events.InputEvent;
import scaleform.clik.events.ButtonEvent;
import scaleform.clik.events.IndexEvent;
import scaleform.clik.events.ComponentEvent;
import scaleform.clik.constants.ControllerType;
import scaleform.clik.ui.InputDetails;
import scaleform.clik.constants.InputValue;
import scaleform.clik.constants.NavigationCode;
import scaleform.clik.utils.Constraints;
import scaleform.clik.utils.ConstrainedElement;
/**
 *  The NumericStepper component displays a single number in the range assigned to it, and supports the ability to increment and decrement the value based on an arbitrary step size.
    
    <b>Inspectable Properties</b>
    A NumericStepper component will have the following inspectable properties:<ul>
    <li><i>enabled</i>: Disables the component if set to false.</li>
    <li><i>focusable</i>: By default, NumericStepper can receive focus for user interactions. Setting this property to false will disable focus acquisition.</li>
    <li><i>minimum</i>: The minimum value of the NumericStepper’s range.</li> 
    <li><i>maximum</i>: The maximum value of the NumericStepper’s range.</li>
    <li><i>value</i>: The numeric value displayed by the NumericStepper.</li>
    <li><i>visible</i>: Hides the component if set to false.</li>
    
    <b>States</b>
    The NumericStepper component supports three states based on its focused and disabled properties. <ul>
    <li>default or enabled state.</li>
    <li>focused state, that highlights the textField area.</li>
    <li>disabled state.</li></ul>
    
    <b>Events</b>
    All event callbacks receive a single Event parameter that contains relevant information about the event. The following properties are common to all events. <ul>
    <li><i>type</i>: The event type.</li>
    <li><i>target</i>: The target that generated the event.</li></ul>
        
    The events generated by the NumericStepper component are listed below. The properties listed next to the event are provided in addition to the common properties.
    <ul>
        <li><i>ComponentEvent.SHOW</i>: The visible property has been set to true at runtime.</li>
        <li><i>ComponentEvent.HIDE</i>: The visible property has been set to false at runtime.</li>
        <li><i>ComponentEvent.STATE_CHANGE</i>: The NumericStepper's state has changed.</li>
        <li><i>FocusHandlerEvent.FOCUS_IN</i>: The NumericStepper has received focus.</li>
        <li><i>FocusHandlerEvent.FOCUS_OUT</i>: The NumericStepper has lost focus.</li>
        <li><i>IndexEvent.INDEX_CHANGE</i>: The NumericStepper's value has changed.</li>
        <li><i>ButtonEvent.CLICK</i>: The next or previous Button of the NumericStepper has been clicked.</li>
    </ul>
 */
intrinsic class scaleform.clik.controls.NumericStepper extends UIComponent
{
	public var stepSize : Number;
	/** True if constraints are disabled for the component. Setting the disableConstraintsproperty to {@code disableConstraints=true} will remove constraints from the textfield. This is useful for components with timeline based textfield size tweens, since constraints break them due to a Flash quirk. */
	public var constraintsDisabled : Boolean;
	public var _maximum : Number;
	public var _minimum : Number;
	public var _stepSize : Number;
	public var _value : Number;
	public var _labelFunction : Function;
	public var state : String;
	public var _newFrame : String;
	/** A reference to the textField instance used to display the selected item's label. Note that when state changes are made, the textField instance may change, so changes made to it externally may be lost. */
	public var textField : TextField;
	/** A reference to the next button instance used to increment the {@code selectedIndex}. */
	public var nextBtn : Button;
	/** A reference to the previous button instance used to decrement the {@code selectedIndex}. */
	public var prevBtn : Button;
	public var container : MovieClip;

	public function get enabled() : Boolean;
	public function set enabled(value:Boolean) : void;

	public function get focusable() : Boolean;
	public function set focusable(value:Boolean) : void;

	public function get maximum() : Number;
	public function set maximum(value:Number) : void;

	public function get minimum() : Number;
	public function set minimum(value:Number) : void;

	public function get value() : Number;
	public function set value(v:Number) : void;

	/**
         * The function used to determine the label.
         */
	public function get labelFunction() : Function;
	public function set labelFunction(value:Function) : void;


	public function NumericStepper();

	public function preInitialize() : void;

	public function initialize() : void;

	/** Increment the {@code value} of the NumericStepper, using the {@code stepSize}. */
	public function increment() : void;

	/** Decrement the {@code value} of the NumericStepper, using the {@code stepSize}. */
	public function decrement() : void;

	public function handleInput(event:InputEvent) : void;

	public function toString() : String;

	public function configUI() : void;

	public function draw() : void;

	public function changeFocus() : void;

	public function handleDataChange(event:Event) : void;

	public function updateAfterStateChange() : void;

	public function updateLabel() : void;

	public function onNext(event:ButtonEvent) : void;

	public function onPrev(event:ButtonEvent) : void;

	public function setState(...states:Array) : void;

	public function lockValue(value:Number) : Number;

}