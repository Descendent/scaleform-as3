import flash.display.DisplayObject;
import flash.display.MovieClip;
import flash.events.Event;
import flash.events.MouseEvent;
import flash.geom.Point;
import scaleform.gfx.FocusManager;
import scaleform.gfx.MouseEventEx;
import scaleform.clik.constants.ConstrainMode;
import scaleform.clik.constants.InvalidationType;
import scaleform.clik.core.UIComponent;
import scaleform.clik.events.InputEvent;
import scaleform.clik.events.ComponentEvent;
import scaleform.clik.events.SliderEvent;
import scaleform.clik.constants.ControllerType;
import scaleform.clik.ui.InputDetails;
import scaleform.clik.constants.InputValue;
import scaleform.clik.constants.NavigationCode;
import scaleform.clik.utils.Constraints;
/**
*   The Slider displays a numerical value in range, with a thumb to represent the value, as well as modify it via dragging.
    <b>Inspectable Properties</b>
        The inspectable properties of the Slider component are:
        <ul>
            <li><i>enabled</i>: Disables the Slider if set to false.</li>
            <li><i>focusable</i>: By default, Slider can receive focus for user interactions. Setting this property to false will disable focus acquisition.</li>
            <li><i>value</i>: The numeric value displayed by the Slider.</li>
            <li><i>minimum</i>: The minimum value of the Slider's range.</li>
            <li><i>maximum</i>: The maximum value of the Slider's range.</li>
            <li><i>snapping</i>: If set to true, then the thumb will snap to values that are multiples of snapInterval.</li>
            <li><i>snapInterval</i>: The snapping interval which determines which multiples of values the thumb snaps to. It has no effect if snapping is set to false.</li>
            <li><i>liveDragging</i>: If set to true, then the Slider will generate a change event when dragging the thumb. If false, then the Slider will only generate a change event after the dragging is over.</li>
            <li><i>offsetLeft</i>: Left offset for the thumb. A positive value will push the thumb inward.</li>
            <li><i>offsetRight</i>: Right offset for the thumb. A positive value will push the thumb inward.</li>
            <li><i>visible</i>: Hides the component if set to false.</li>
        </ul>
    
    <b>States</b>
    Like the ScrollIndicator and the ScrollBar, the Slider does not have explicit states. It uses the states of its child elements, the thumb and track Button components.
    
    <b>Events</b>
    All event callbacks receive a single Event parameter that contains relevant information about the event. The following properties are common to all events. <ul>
    <li><i>type</i>: The event type.</li>
    <li><i>target</i>: The target that generated the event.</li></ul>
        
    The events generated by the Slider component are listed below. The properties listed next to the event are provided in addition to the common properties.
    <ul>
        <li><i>ComponentEvent.SHOW</i>: The visible property has been set to true at runtime.</li>
        <li><i>ComponentEvent.HIDE</i>: The visible property has been set to false at runtime.</li>
        <li><i>FocusHandlerEvent.FOCUS_IN</i>: The component has received focus.</li>
        <li><i>FocusHandlerEvent.FOCUS_OUT</i>: The component has lost focus.</li>
        <li><i>ComponentEvent.STATE_CHANGE</i>: The component's state has changed.</li>
        <li><i>SliderEvent.VALUE_CHANGE</i>: The value of the Slider has changed.</li>
    </ul>
*/
intrinsic class scaleform.clik.controls.Slider extends UIComponent
{
	public var liveDragging : Boolean;
	/** The mouse state of the button.  Mouse states can be "default", "disabled". */
	public var state : String;
	public var offsetLeft : Number;
	public var offsetRight : Number;
	public var _minimum : Number;
	public var _maximum : Number;
	public var _value : Number;
	public var _snapInterval : Number;
	public var _snapping : Boolean;
	public var _dragOffset : Object;
	public var _trackDragMouseIndex : Number;
	public var _trackPressed : Boolean;
	public var _thumbPressed : Boolean;
	/** A reference to the thumb symbol in the Slider, used to display the slider {@code value}, and change the {@code value} via dragging. */
	public var thumb : Button;
	/** A reference to the track symbol in the Slider used to display the slider range, but also to jump to a specific value via clicking. */
	public var track : Button;

	public function get enabled() : Boolean;
	public function set enabled(value:Boolean) : void;

	public function get focusable() : Boolean;
	public function set focusable(value:Boolean) : void;

	public function get value() : Number;
	public function set value(value:Number) : void;

	public function get maximum() : Number;
	public function set maximum(value:Number) : void;

	public function get minimum() : Number;
	public function set minimum(value:Number) : void;

	/**
         * The {@code value} of the {@code Slider}, to make it polymorphic with a {@link ScrollIndicator}.
         */
	public function get position() : Number;
	public function set position(value:Number) : void;

	public function get snapping() : Boolean;
	public function set snapping(value:Boolean) : void;

	public function get snapInterval() : Number;
	public function set snapInterval(value:Number) : void;


	public function Slider();

	public function preInitialize() : void;

	public function initialize() : void;

	/** 
         * Marks the settings of the Slider (max, mix, snapping, snap interval) as invalid. These settings will be updated on the next Stage.RENDER event. 
         */
	public function invalidateSettings() : void;

	/** @exclude */
	public function handleInput(event:InputEvent) : void;

	/** @exclude */
	public function toString() : String;

	public function configUI() : void;

	public function draw() : void;

	public function changeFocus() : void;

	public function updateThumb() : void;

	public function beginDrag(e:MouseEvent) : void;

	public function doDrag(e:MouseEvent) : void;

	public function endDrag(e:MouseEvent) : void;

	public function trackPress(e:MouseEvent) : void;

	public function lockValue(lvalue:Number) : Number;

	public function scrollWheel(delta:Number) : void;

}